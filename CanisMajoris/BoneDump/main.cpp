#include "helpers.inl"

#include <fstream>

#include <FileIO/OBJImpex/Reader/IO_OBJLoader.h>
#include <Utils/MeshContainer.h>

#pragma comment(lib,"SDL.lib")
#pragma comment(lib,"SDLmain.lib")

int main(int argc, char *argv[])
{
	using namespace std;
	if (argc <= 1 || argc > 5)
	{
		cout << ABOUT;
		return 0;
	}

	if (!strcmp(argv[2], SUPPORTED_FLAGS.CS_OUTPUT) && 
	    !strcmp(argv[2], SUPPORTED_FLAGS.H_OUTPUT)  &&
	    !strcmp(argv[2], SUPPORTED_FLAGS.LOG)       &&
		!strstr(argv[3], SUPPORTED_FLAGS.SCALE_FACTOR)
	   )
	{
		cout << INVALID_PARAM_MESSAGE + string("{0} \n", argv[2]);
		return -1;
	}

	char activeFlag[12] = "";
	char* extension = "";
	float scale_factor = 1.0f;

	if (strcmp(argv[2], SUPPORTED_FLAGS.CS_OUTPUT) == 0)
	{
		extension = ".cs";
		strcpy_s(activeFlag, sizeof(activeFlag), SUPPORTED_FLAGS.CS_OUTPUT);
	}

	if (strcmp(argv[2], SUPPORTED_FLAGS.H_OUTPUT) == 0)
	{
		extension = ".h";
		strcpy_s(activeFlag, sizeof(activeFlag), SUPPORTED_FLAGS.H_OUTPUT);
	}

	if (strstr(argv[3], SUPPORTED_FLAGS.SCALE_FACTOR) == 0)
	{
		scale_factor = stof(argv[3] + strlen(SUPPORTED_FLAGS.SCALE_FACTOR));
		if (scale_factor <= 0)
		{
			scale_factor = 1.0f;
		}
	}

	Core::IO::ModelFile *model = new Core::IO::ModelFile();
	model->Load(argv[1]);
	char* endOfFileName = argv[1];
	strncpy_s(endOfFileName, strlen(endOfFileName), endOfFileName, strlen(endOfFileName) - 4);
	char *char_index = endOfFileName + strlen(endOfFileName);
	for (int index = strlen(endOfFileName); index > 0; --index)
	{
		char_index--;
		if (strstr(char_index - 1, "\\") != 0)
		{
			int nameLength = strlen(endOfFileName) - index;
			endOfFileName = char_index;
			break;
		}
	}
	
	char temp[16];
	strcpy_s(temp, sizeof(temp), endOfFileName);
	strcat_s(temp, sizeof(temp), extension);

	ofstream dumpFile = ofstream(temp, ofstream::out);
	cout << "Dumping data to: " << temp << endl;
	cout << "Scaling geometry with factor: " << scale_factor << endl;

	std::vector<Core::Renderer::CoreUtils::Vertex*> vertexContainer;
	MeshContainer meshes(model->ExtractMeshData(vertexContainer));
	dumpFile << "\/\/! Consts generated by BoneDump.exe for model " << endOfFileName << '\n';
	for (int index = 0; index < meshes.length(); ++index)
	{
		const string meshName = meshes.GetMesh(index)->GetID();
		if (strstr(meshName.c_str(), "BN_"))
		{
			generateContents(dumpFile, scale_factor, activeFlag, meshes, index);
		}
	}
	dumpFile << "//=========================End=Of=Generated=Block===============================//";

	dumpFile.close();
	return 0;
}